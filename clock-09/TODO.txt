To advance to the next step apply the following changes:

Review the class `ClockWork` and implement more intesive testing.
(Some TBD-s have already been prepared in `main.cpp`.)

Before you go understand these pitfalls and how to solve them:

* An `std::ostringstream os` collects ALL of the input you send
  to it UNLESS you clear it in between.
  * So you have to …
    * … EITHER include all prior output in your expectations
    * … OR use `os.str("")` in between
    * … OR use separate `ostringstream`-s.

* The callbacks will run in no guaranteed particular order by
  `ClockWork::tick()` so if the callbacks use a single letter
  output to indicate which one has been run, every permutation
  needs to be considered valid for a successful test.

Building on the standard algorithm `std::is_permutation` this
could be tested with the following helper function:

    bool check_permutation_of(const std::string s1,
                              std::ostream& os) {
        const auto s2 = os.str();
        return std::is_permutation(s1.cbegin(), s1.cend(),
                                   s2.cbegin(), s2.cend());
    }

NOTE: When unit-testing with `SHOW_` you need to test for the
      expectation `"true"` above (or "1" depending on whether
      `std::ios::boolalpha` has or has not been set).
